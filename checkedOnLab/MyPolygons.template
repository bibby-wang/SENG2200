// The University of Newcastle
// School of Electrical Engineering and Computer Science
// SENG2200 Programming Languages & Paradigms
// Semester 1, 2018
// Programming Assignment 1
// Due Monday, 26 March 2018
// Author: Binbin Wang
// Modified by: Binbin Wang
// Student No: 3214157



using namespace std;
namespace BB_A1
{
	
	//Constructors, which return an empty MyPolygons
	template <typename object>
	MyPolygons<object>::MyPolygons()
	{
		headPointer = new Node<object>();
		currentPointer = NULL;
		cirLstLength = 0;
	}
	
	//Constructors, which has one data
	template <typename object>
	MyPolygons<object>::MyPolygons(const object& data)
	{
		headPointer = new Node<object>(data);
		currentPointer = headPointer;
		cirLstLength = 1;
	}

	//Destructor MyPolygons 
	template <typename object>
	MyPolygons<object>::~MyPolygons()
	{

		currentPointer=NULL;
	}


	//add the data in to Node head
	template <typename object>
	void MyPolygons<object>::prepend(const object& data)
	{
		if(cirLstLength==0) 	//first Node
		{
			headPointer = new Node<object>(data);
			headPointer -> setNext(headPointer);
			headPointer -> setPrevious(headPointer);
			currentPointer = headPointer;
			cirLstLength = 1;
			
		}
		else
		{
			Node<object>* prependItem = new Node<object>(data);	

			//insert the new item befor the head 
			prependItem -> setNext(currentPointer);
			prependItem -> setPrevious(currentPointer->getPrevious());
			currentPointer -> getPrevious()->setNext(prependItem);	
			currentPointer -> setPrevious(prependItem);	
			headPointer = currentPointer = prependItem;// and make it to the new head

			cirLstLength++;
			prependItem = NULL;
		}
		
	}
	
	
	//append the data
	template <typename object>
	void MyPolygons<object>::append(const object& data)
	{
		if(cirLstLength==0) 	//first Node
		{
			headPointer = new Node<object>(data);
			headPointer -> setNext(headPointer);
			headPointer -> setPrevious(headPointer);
			currentPointer = headPointer;
			cirLstLength = 1;
			
		}
		else
		{

			
			Node<object>* appendItem = new Node<object>(data);	
			//insert the new item after the head
			appendItem -> setNext(currentPointer);
			appendItem -> setPrevious(currentPointer->getPrevious());		
			currentPointer -> getPrevious()->setNext(appendItem);	
			currentPointer -> setPrevious(appendItem);
			//currentPointer = appendItem;

			cirLstLength++;
			appendItem = NULL;

			
			
		}
		
	}



	
	//insert the data
	template <typename object>
	void MyPolygons<object>::insert(const object& data)
	{
		if(cirLstLength==0) 	//first Node
		{
			headPointer = new Node<object>(data);
			headPointer -> setNext(headPointer);
			headPointer -> setPrevious(headPointer);
			currentPointer = headPointer;
			cirLstLength = 1;
			
		}
		else
		{

	
			Node<object>* insertItem = new Node<object>(data);	
			//insert new item befor currentPointer
			insertItem -> setNext(currentPointer);
			insertItem -> setPrevious(currentPointer->getPrevious());
			currentPointer -> getPrevious() -> setNext(insertItem);			
			currentPointer -> setPrevious(insertItem);
			
			currentPointer=headPointer;
			cirLstLength++;
			insertItem = NULL;
		}
	}
	
	
	//move to next
	template <typename object>
	void MyPolygons<object>::next()
	{
		currentPointer=currentPointer->getNext();

	}

	//resetting currentPointer to head
	template <typename object>
	void MyPolygons<object>::resetting()
	{
		currentPointer=headPointer;


	}



	

	template <typename object>
	object MyPolygons<object>::getHead() const
	{

		return currentPointer->getData();
	}
	
	
	template <typename object>
	Node<object>* MyPolygons<object>::getHeadPointer() const
	{
		return headPointer;
	}	
	
		
	
	
	
	template <typename object>
	std::size_t MyPolygons<object>::getSize() const
	{
		return cirLstLength;
	}	


	
	
	// * Overloaded output operator (i.e. ‘<<’) that outputs the content of the MyPolygons in a form suitable for Pointing.
	template <typename object>
	ostream& operator<<(ostream& out, MyPolygons<object>& allPolygons)
	{
		Node<object>* cPointer = allPolygons.getHeadPointer();
		int i=allPolygons.getSize();
		
		while(i>0)
		{
			
			out<<cPointer->getData().to_string()<<endl; // format the Point data
			cPointer = cPointer -> getNext();//go to next Node
			i--;
		}
		
		out<<endl;
		
		return out;//output 
	}




	




	
}